name: Publish NPM Package

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the master branch
on:
  push:
    branches:
      - master

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  on-success:
    needs: publish
    runs-on: ubuntu-latest
    if: ${{ needs.publish.result == 'success' }}
    steps:
      - name: Notification Feishu
        uses: whatwewant/action-robot-feishu@v0.0.10
        with:
          url: ${{ secrets.NPM_VERSION_FEISHU_BOT_WEBHOOK_URL }}
          title: '✅ NPM 发布：${{ github.repository }}'
          text: |
            分支: ${{ github.ref }}
            提交信息: ${{ github.event.head_commit.message }}
            提交人: ${{ github.actor }}
            状态: 构建成功（https://github.com/${{ github.repository }}/actions/runs/${{ github.run.id }}）

  on-failure:
    needs: publish
    runs-on: ubuntu-latest
    if: ${{ needs.publish.result == 'failure' }}
    steps:
      - name: Notification Feishu
        uses: whatwewant/action-robot-feishu@v0.0.10
        with:
          url: ${{ secrets.NPM_VERSION_FEISHU_BOT_WEBHOOK_URL }}
          title: '❌ NPM 发布：${{ github.repository }}'
          text: |
            分支: ${{ github.ref }}
            提交信息: ${{ github.event.head_commit.message }}
            提交人: ${{ github.actor }}
            状态: 构建失败（https://github.com/${{ github.repository }}/actions/runs/${{ github.run.id }}）

  publish:
    # bootstrap:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Get Current Date
        id: date
        run: echo "::set-output name=date::$(date +'%Y-%m-%d')"

      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2
        with:
          fetch-depth: '0'

      - uses: oleksiyrudenko/gha-git-credentials@v2-latest
        with:
          token: '${{ secrets.GITHUB_TOKEN }}'

      # Runs a single command using the runners shell
      - name: Use Node.js
        uses: actions/setup-node@v1
        with:
          node-version: 14.x
          registry-url: https://registry.npmjs.org

      - name: Cache node_modules
        uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ~/.npm
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Install Dependencies
        run: |
          npm i
          npm run bootstrap

      # build:
      #   needs: bootstrap
      #   runs-on: ubuntu-latest
      #   steps:
      #     - uses: actions/checkout@v2
      #       with:
      #         fetch-depth: '0'

      #     - name: Restore node_modules cache
      #       uses: actions/cache@v2
      #       id: yarn-cache
      #       with:
      #         path: ~/.npm
      #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Before Build
        run: cp tsconfig.prod.json tsconfig.json

      - name: Make Build
        run: npm run build

      - name: After Build
        run: git checkout tsconfig.json

      # test:
      #   needs: build
      #   runs-on: ubuntu-latest
      #   steps:
      #     - uses: actions/checkout@v2
      #       with:
      #         fetch-depth: '0'

      #     - name: Restore node_modules cache
      #       uses: actions/cache@v2
      #       id: yarn-cache
      #       with:
      #         path: ~/.npm
      #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Make Testing
        run: npm run test

      # coverage:
      #   needs: build
      #   runs-on: ubuntu-latest
      #   steps:
      #     - uses: actions/checkout@v2
      #       with:
      #         fetch-depth: '0'

      #     - name: Restore node_modules cache
      #       uses: actions/cache@v2
      #       id: yarn-cache
      #       with:
      #         path: ~/.npm
      #         key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}

      - name: Make Coverage
        run: npm run coverage

      # publish:
      #   needs: [test, coverage]
      #   runs-on: ubuntu-latest
      #   steps:
      #     - uses: actions/checkout@v2
      #       with:
      #         fetch-depth: '0'

      - name: Before Publish
        run: cp .npmrc.template .npmrc

      # Runs a set of commands using the runners shell
      - name: Make Publish
        run: npx lerna publish --yes
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_AUTH_TOKEN: ${{ secrets.NPM_AUTH_TOKEN }}
